// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
{
  name: chip_entropy_src
  testpoints: [
    // ENTROPY_SRC (pre-verified IP) integration tests:
    {
      name: chip_sw_entropy_src_ast_rng_req
      //TODO(#13460): A dv enginner should add an assertion to check the connectivity for this test.
      desc: '''Verify the RNG req to ast.

            - Program the entropy src in normal RNG mode.
            - Route the entropy data received from RNG to the FIFO.
            - Verify that the FIFO depth is non-zero via SW - indicating the reception of data over
              the AST RNG interface.
            - Verify the correctness of the received data with assertion based connectivity checks.
            '''
      features: ["ENTROPY_SRC.MODE.ROUTE_TO_FIRMWARE"]
      stage: V2
      si_stage: SV2
      tests: ["chip_sw_entropy_src_ast_rng_req"]
      bazel: []
    },
    {
      name: chip_sw_entropy_src_csrng
      desc: '''Verify the transfer of entropy bits to CSRNG.

            Verify the entropy valid interrupt.
            At the CSRNG, validate the reception of entropy req interrupt.

            - Disable edn0, edn1, csrng and entropy_src, as these are enabled by the test ROM.
            - Enable entropy_src in fips mode routing data to csrng.
            - Enable csrng and enable the entropy request interrupt.
            - Issue csrng instantiate and reseed commands. Check that for each csrng command,
              there is a corresponding entropy request interrupt.
            - Generate output and ensure the data output is valid, and that csrng is not reporting
              any errors.
            - Issue instantiate and reseed commands from edn0 and edn1. Check that for each
              command, there is a corresponding entropy request interrupt.
            '''
      features: ["ENTROPY_SRC.MODE.EDN"]
      stage: V2
      si_stage: SV3
      tests: ["chip_sw_entropy_src_csrng"]
      bazel: []
    },
    {
      name: chip_sw_entropy_src_fuse_en_fw_read
      desc: '''Verify the fuse input entropy_src.

            - Initialize the OTP with the fuse that controls whether the SW can read the entropy src
              enabled.
            - Read the OTP and verify that the fuse is enabled.
            - Read the entropy_data_fifo via SW and verify that it reads valid values.
            - Reset the chip, but this time, initialize the OTP with the fuse disabled.
            - Read the OTP and verify that fuse is disabled.
            - Read the internal state via SW and verify that the entropy valid bit is zero.
            '''
      stage: V2
      si_stage: None
      tests: ["chip_sw_entropy_src_fuse_en_fw_read_test"]
      bazel: []
    },
    {
      name: chip_sw_entropy_src_known_answer_tests
      desc: '''Verify our ability to run known-answer tests in SW.

            - Configure the device in firmware-bypass mode.
            - Feed NIST test-defined entropy sequences into the conditioner
            - Read the entropy_data_fifo via SW; verify that it reads the expected values.

            Notes for silicon targets:
            - This test requires access to firmware bypass mode, which is gated by OTP.
              This test should thus be done in a secure facility.
            '''
      features: [
        "ENTROPY_SRC.MODE.ROUTE_TO_FIRMWARE",
        "ENTROPY_SRC.FW_OV.OBSERVE",
        "ENTROPY_SRC.FW_OV.EXTRACT_AND_INSERT"
      ]
      stage: V2
      si_stage: SV3
      tests: ["chip_sw_entropy_src_kat_test"]
      bazel: []
    },
    {
      name: chip_sw_entropy_src_fips_health_check
      desc: '''
            Check that the entropy source can generate FIPS quality true random numbers.

            This includes setting up the health checks within the entropy source, for example: repitition count, adaptive proportion test, Bucket and Markov tests.
            '''
      features: [
        "ENTROPY_SRC.HEALTH_TESTS",
        "ENTROPY_SRC.MODE.FIPS"
      ]
      stage: V3
      si_stage: SV3
      tests: []
      bazel: []
    }
  ]
}
